<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set actor properties
event_inherited();
sprite=0;
rotate=true;
frameSpd=0.01;
fSolid=true;
fPushable=true;
onGround=true;
spdDis=0;
//Variables with the postfix "Snd" have arrays that can be extended. Use this to assign
//multiple sounds to one variable.
jumpSnd[0]=noone;
fallSnd[0]=noone;
alarm[0]=irandom_range(60,300);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=irandom_range(60,300);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move test
if (!instance_exists(objTransition) &amp;&amp; z&lt;global.minZ-300)
    transition_create(room,c_black);
if (cutscene_exists())
    exit
if (keyboard_check_pressed(ord("R")))
{
    x=xstart;
    y=ystart;
    z=256;
    hSpeed=0;
    vSpeed=0;
    zSpeed=0;
}
//Code by YAL
var keyX=keyboard_check(ord("W"))-keyboard_check(ord("S")),
    keyY=keyboard_check(ord("D"))-keyboard_check(ord("A")),
    keyL,camD=0;
onGround=(c_overlap_world_position(hitbox,x,y,z-2) || fOnGround) &amp;&amp; !sliding;
spdDis=point_distance(0,0,hSpeed,vSpeed);
//length of moving vector:
keyL=point_distance(0,0,keyX,keyY);
//if needed, normalize vector to prevent faster diagonal movement:
if (keyL&gt;1)
{
    keyX/=keyL;
    keyY/=keyL;
    keyL=1;
}
if (instance_exists(objCamera))
{
    if (abs(keyY) &amp;&amp; fVisible &amp;&amp; !objCamera.free)
        objCamera.faceDir-=keyY*spdDis;
    camD=objCamera.faceDir;
}
//actually move around, if needed:
if (keyL&gt;0)
{
    faceDir=point_direction(0,0,keyX,keyY)+global.cD;
    var acc=1+6*!onGround,cDD=global.cD-90,lX=lengthdir_x(keyX,global.cD)+
                                              lengthdir_x(keyY,cDD),
        lY=lengthdir_y(keyX,global.cD)+lengthdir_y(keyY,cDD),vector=point_distance(0,0,lX,
                                                                    lY),
        lX2=abs(lengthdir_x(vector,faceDir))*3,lY2=abs(lengthdir_y(vector,faceDir))*3;
    hSpeed=clamp(hSpeed+((lX*0.75)/acc),-lX2,lX2);
    vSpeed=clamp(vSpeed+((lY*0.75)/acc),-lY2,lY2);
}
//jump when on the ground
if (onGround)
{
    if (keyboard_check_pressed(vk_space))
    {
        zSpeed=2.5;
        if (jumpSnd[0])
            d3d_sound_play(jumpSnd[max(0,irandom(array_length_1d(jumpSnd)-1))],false,1);
        d3d_sound_play(sndJump,false,1);
    }
    hSpeed=lerp(hSpeed,0,0.2);
    vSpeed=lerp(vSpeed,0,0.2);
}
//Get nearest enemy
var near=instance_nearest(x,y,objEnemy);
//If nearest enemy is within the range of the player, crank up that battle music.
if (near)
    global.battle=point_distance_3d(x,y,z,near.x,near.y,near.z)&lt;100;
else
    global.battle=false;
//Bottomless pit detection
if (z&lt;global.minZ)
{
    audio_stop_all();
    if (fallSnd[0])
        d3d_sound_play(fallSnd[max(0,irandom(array_length_1d(fallSnd)-1))],false,1);
    audio_play_sound(musLose,1,false);
    with (instance_create(0,0,objCutscene))
    {
        global.follow=true;
        cutscene_create();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
