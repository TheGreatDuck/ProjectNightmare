<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set actor properties
event_inherited();
hp = 8;
sprite = 0;
rotate = true;
frameSpd = 0.01;
fSolid = true;
fPushable = true;
onGround = true;
fric = 0.2;
spdDis = 0;
jumpSpd = 2.5;
holding = noone;
//Variables with the postfix "Snd" have arrays that can be extended. Use this to assign
//multiple sounds to one variable.
jumpSnd[0] = noone;
fallSnd[0] = noone;
hurtSnd[0] = noone;
deadSnd[0] = noone;
timer[0] = irandom_range(60, 300);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update audio &amp; position
actor_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move test
if (!instance_exists(objTransition) &amp;&amp; (z &lt; global.minZ - 300 || timer_tick(2)))
{
    if (global.link)
        audio_play_sound(sndRespawn, 1, false);
    transition_create(room, c_black);
}
if (instance_exists(objCamera))
    if (timer_tick(1))
        fVisible = !objCamera.look;
    else
        if (timer[1] &amp;&amp; !objCamera.look)
            fVisible = !fVisible;
if (onGround)
{
    //Friction
    if !(sliding)
    {
        hSpeed = lerp(hSpeed, 0, fric);
        vSpeed = lerp(vSpeed, 0, fric);
    }
    //Death cutscene
    if (!hp &amp;&amp; !cutscene_exists())
    {
        timer[1] = -65536;
        timer[2] = 60;
        if (global.link)
            for (var i = 0; i &lt; 2; i++)
                {if (global.levelMusic[i])
                    audio_sound_gain(global.levelMusic[i], 0, 750);}
        else
        {
            audio_stop_all();
            audio_play_sound(musLose, 1, false);
        }
        player_drop_holdable(0, 0, 0);
        player_sound_play(deadSnd);
        with (instance_create(objCamera.x, objCamera.y, objCutscene))
        {
            direction = objCamera.faceDir;
            pitch = objCamera.pitch;
            z = objCamera.z;
            cutscene_create();
            var xx = other.x + lengthdir_x(32, other.faceDir), yy = other.y + lengthdir_y(32, other.faceDir);
            cutscene_camera(xx, yy, other.z, point_direction(xx, yy, other.x, other.y), 0, 30);
        }
    }
}
onGround = c_raycast_world(x, y, z, x, y, bottom - 2, 1) || fOnGround;
spdDis = point_distance(0, 0, hSpeed, vSpeed);
if (!hp || cutscene_exists())
    exit
if (keyboard_check_pressed(ord("R")))
{
    sliding = false;
    fOnGround = false;
    hSpeed = 0;
    vSpeed = 0;
    zSpeed = 0;
    x = xstart;
    y = ystart;
    z = 300;
}
//Code by YAL
var keyX = (keyboard_check(ord("W")) - keyboard_check(ord("S"))), keyY = keyboard_check(ord("D")) - keyboard_check(ord("A")), keyL, camD = 0;
keyL = point_distance(0, 0, keyX, keyY) * !sliding; //length of moving vector
//if needed, normalize vector to prevent faster diagonal movement:
if (keyL &gt; 1)
{
    keyX /= keyL;
    keyY /= keyL;
    keyL = 1;
}
if (instance_exists(objCamera))
{
    if (abs(keyY) &amp;&amp; fVisible &amp;&amp; !objCamera.free)
        objCamera.faceDir -= (keyY * spdDis);
    camD = objCamera.faceDir;
}
//actually move around, if needed:
if (fric == 0.2)
{
    //change friction if sliding
    if (sliding)
        fric = 0.02;
    if (keyL &gt; 0)
    {
        faceDir = point_direction(0,0,keyX,keyY) + global.cD;
        var acc = 1 + 6 * !onGround, cDD = global.cD - 90, lX = lengthdir_x(keyX, global.cD) + lengthdir_x(keyY, cDD), lY = lengthdir_y(keyX, global.cD) + lengthdir_y(keyY, cDD), vector = point_distance(0, 0, lX, lY), walkSpeed = 2;
        if (onGround &amp;&amp; floorPitch)
            walkSpeed = lengthdir_x(2, floorPitch);
        var lX2 = abs(lengthdir_x(vector, faceDir)) * walkSpeed, lY2 = abs(lengthdir_y(vector, faceDir)) * walkSpeed, acc2 = 0.75;
        hSpeed = clamp(hSpeed + ((lX * acc2) / acc), -lX2, lX2);
        vSpeed = clamp(vSpeed + ((lY * acc2) / acc), -lY2, lY2);
    }
}
else
    if (abs(hSpeed) &lt; 0.3 &amp;&amp; abs(vSpeed) &lt; 0.3)
        fric = 0.2;
//jump when on the ground
if (onGround &amp;&amp; !sliding &amp;&amp; floorPitch &lt; 60 &amp;&amp; keyboard_check_pressed(vk_space))
{
    if !(c_raycast_world(x, y, z, x, y, top + jumpSpd, 1))
        z += jumpSpd;
    zSpeed = jumpSpd - 0.1;
    fric = 0.2;
    player_sound_play(jumpSnd);
    d3d_sound_play(sndJump, false, 1);
}
//Get nearest enemy
var near = instance_nearest(x, y, objEnemy);
//If nearest enemy is within the range of the player, crank up that battle music.
if (near)
    global.battle = point_distance_3d(x, y, z, near.x, near.y, near.z) &lt; 100;
else
    global.battle = false;
//Holding mechanic
if (keyboard_check_pressed(ord("E")))
    if (holding)
        player_drop_holdable(hSpeed + lengthdir_x(1.5, faceDir), vSpeed + lengthdir_y(1.5, faceDir), zSpeed + 1.5);
    else
    {
        near = instance_nearest(x, y, objHoldable);
        if (near &amp;&amp; point_distance_3d(x, y, z, near.x, near.y, near.z) &lt; 3 * near.radius)
        {
            near.target = self;
            holding = near;
        }
        else
        {
            //If there's nothing to be held, then the player might be talking to an NPC
            near = instance_nearest(x, y, objNPC);
            if (near &amp;&amp; fOnGround)
            {
                var distance = point_distance_3d(near.x, near.y, near.z, x, y, z), dir = point_direction(near.x, near.y, x, y);
                if (distance &lt; near.radius + 16 &amp;&amp; abs(angle_difference(dir, near.faceDir)) &lt; 60)
                {
                    faceDir = point_direction(x, y, near.x, near.y);
                    var distanceDir = faceDir - 90, distanceHalf = distance * 0.5, xx = near.x + lengthdir_x(distanceHalf, dir) + lengthdir_x(32, distanceDir), yy = near.y + lengthdir_y(distanceHalf, dir) + lengthdir_y(32, distanceDir);
                    near.working = true;
                    with (instance_create(objCamera.x, objCamera.y, objCutscene))
                    {
                        z = objCamera.z;
                        direction = objCamera.faceDir;
                        pitch = objCamera.pitch;
                        cutscene_create();
                        cutscene_camera(xx, yy, near.z - 4, point_direction(xx, yy, near.x, near.y), 0, 60)
                        cutscene_wait(20);
                        //Add messages manually, because cutscene_message only allows string inputs.
                        ds_list_add(list, 3);
                        var strings = ds_list_create();
                        for (var i = 0; i &lt; array_length_1d(near.message); i++)
                            ds_list_add(strings, near.message[i]);
                        ds_list_add(list, strings);
                        cutscene_wait_message();
                        cutscene_wait(10);
                        cutscene_end();
                    }
                }
            }
        }
    }
//Hurt test
if (keyboard_check_pressed(ord("Z")))
    event_user(0);
//Bottomless pit detection
if (z &lt; global.minZ)
{
    if (global.link)
        for (var i = 0; i &lt; 2; i++)
            {if (global.levelMusic[i])
                audio_sound_gain(global.levelMusic[i], 0, 750);}
    else
    {
        audio_stop_all();
        audio_play_sound(musLose, 1, false);
    }
    player_sound_play(fallSnd);
    player_drop_holdable(0, 0, 1);
    with (instance_create(0, 0, objCutscene))
    {
        global.follow = true;
        cutscene_create();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!timer[1] &amp;&amp; hp)
{
    player_sound_play(hurtSnd);
    hp--;
    timer[1] = 120;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
