<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load game
//[CONTROL BINDS]
//(Movement)
global.bind[0, 0] = ord("W"); //Up
global.bind[0, 1] = gp_axislv;
global.bind[1, 0] = ord("A"); //Left
global.bind[1, 1] = gp_axislh;
global.bind[2, 0] = ord("S"); //Down
global.bind[2, 1] = gp_axislv;
global.bind[3, 0] = ord("D"); //Right
global.bind[3, 1] = gp_axislh;
global.bind[4, 0] = vk_space; //Jump
global.bind[4, 1] = gp_face1;
global.bind[5, 0] = ord("X"); //Slidekick
global.bind[5, 1] = gp_face2;
global.bind[6, 0] = ord("E"); //Interact
global.bind[6, 1] = gp_face3;
global.bind[7, 0] = ord("Q"); //Make camera look from player
global.bind[7, 1] = gp_face4;
//(Camera)
global.bind[8, 0] = mb_left; //Free scroll
global.bind[8, 1] = gp_shoulderl;
global.bind[9, 0] = mb_right; //First person
global.bind[9, 1] = gp_shoulderr;
global.bind[10, 1] = gp_axisrv; //Camera up
global.bind[11, 1] = gp_axisrh; //Camera left
global.bind[12, 1] = gp_axisrv; //Camera down
global.bind[13, 1] = gp_axisrh; //Camera right
//Load textures. These will mostly be backgrounds. Animated textures are sprites.
global.textures = 0;
texture_load(btSkybox, 0);
texture_load(btTile, 0);
texture_load(btGrass, 0);
texture_load(stWater, 1);
c_init();
worldShape = -1;
worldObject = -1;
global.world = -1;
/*Geometry types are stored in global.worldModel. They will also contain a list with their position:
0 - floor
1 - wall*/
global.worldModel = ds_list_create();
//Level properties
for (var i = 0; i &lt; 2; i++)
    global.levelMusic[i] = noone;
global.musicVolume[0] = 1; //Music slot 0 is the main level music. Set it to noone for silence.
global.musicVolume[1] = 0; //Music slot 1 is used for battle music. Set it to noone for no battle music in levels.
global.skybox = 0; //The texture ID of the skybox.
global.battle = false; //Used for switching between normal and battle music.
global.dawn = false; //Used to play musDawn on level start. 
global.paused = false;
global.roomName = "Loading"; //Used for Discord Rich Presence
global.roomIcon = 0; //Also for RPC. The number corresponds to which large icon key should be used.
global.minZ = 0; //The minimal Z of the level. Used for deleting actors below this position.
global.messageFont = font_add_sprite(sprFont, ord("!"), true, 1);
global.deltaTime = 60 / 1000000 * delta_time;
global.debugLevel = "level.pnl";
pauseBg = -1;
pauseX = -463;
healthY = -46;
lolfps = fps_real;
timer_create();
timer[0] = 60;
setFramerate = true; /*Sets the maximum framerate. The values are as follows:
false - 30
true - 60*/
display_set_gui_size(960, 540);
gameLoop = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level music control &amp; delta timing
global.deltaTime = 60 / 1000000 * delta_time;
//Music control. Sets volume of each track accordingly while the game is unpaused
if (global.dawn)
{
    if !(audio_is_playing(musDawn))
    {
        music_start();
        global.dawn = false;
    }
}
else
    if !(global.paused)
    {
        if (global.levelMusic[global.battle] &amp;&amp; !global.musicVolume[global.battle])
        {
            global.musicVolume[global.battle] = 1;
            audio_sound_gain(global.levelMusic[global.battle], 1, 750);
        }
        if (global.levelMusic[!global.battle] &amp;&amp; global.musicVolume[!global.battle])
        {
            global.musicVolume[!global.battle] = 0;
            audio_sound_gain(global.levelMusic[!global.battle], 0, 750);
        }
    }
if (keyboard_check(vk_numpad0) &amp;&amp; keyboard_check_pressed(vk_numpad1) &amp;&amp; !audio_is_playing(musMosa))
{
    audio_stop_sound(musDawn);
    audio_stop_sound(global.levelMusic[0]);
    audio_stop_sound(global.levelMusic[1]);
    audio_play_sound(musMosa, 1, true);
}
//Toggle pause
if (bind_hardcode_pressed(vk_enter, gp_start) &amp;&amp; ((instance_exists(objPlayer) &amp;&amp; !cutscene_exists()) || global.paused) &amp;&amp; !audio_is_playing(sndPause))
{
    audio_play_sound(sndPause, 0, false);
    global.paused = !global.paused;
    audio_sound_gain(global.levelMusic[global.battle], 1 / (1 + 4 * global.paused), 100);
    if (global.paused)
    {
        pauseX = 1000;
        pauseBg = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], false, false);
        instance_deactivate_all(true);
        exit
    }
    else
    {
        background_delete(pauseBg);
        instance_activate_all();
    }
}
//Return to title screen
if (bind_hardcode_pressed(vk_escape, gp_select) &amp;&amp; instance_exists(objPlayer))
{
    room_goto(rmTitle);
    global.paused = false;
    exit
}
/*The game logic system: This synchronizes the game logic with delta time, allowing you
to play at any framerate. Instead of using step events, all objects use the according
User Defined events as their steps.*/
gameLoop += global.deltaTime;
while (gameLoop)
{
    with (all)
    {
        event_user(14); //Begin Step
        event_user(13); //Step
        event_user(15); //End Step
    }
    gameLoop--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update FPS counter
if (timer_tick(0))
{
    lolfps = fps_real;
    timer[0] = 60;
}
healthY = lerp(healthY, -46 + 2 * (instance_exists(objPlayer) &amp;&amp; objPlayer.hp &lt; 8) * 46, 0.1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear map
if (c_world_exists())
    c_world_destroy();
if (c_object_exists(worldObject))
    c_object_destroy(worldObject);
if (c_shape_exists(worldShape))
    c_shape_destroy(worldShape);
for (i = 0; i &lt; ds_list_size(global.worldModel); i++)
{
    var vertexBatch = ds_list_find_value(global.worldModel, i);
    if (ds_exists(vertexBatch, ds_type_list))
    {
        var modelID = ds_list_find_value(vertexBatch, 1);
        show_debug_message("Destroyed vertex batch with texture " + string(ds_list_find_value(vertexBatch, 0)) + ", model ID " + string(modelID));
        d3d_model_destroy(modelID);
        ds_list_destroy(vertexBatch);
    }
}
ds_list_clear(global.worldModel);
show_debug_message("Cleared world model");
if (background_exists(pauseBg))
{
    global.paused = false;
    background_delete(pauseBg);
}
audio_stop_all();
global.dawn = false;
global.skybox = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load map
switch (room)
{
    case (rmTitle):
        audio_sound_gain(global.levelMusic[0], 1, 0);
    case (rmMain):
        //Create separate d3d models for multiple textures
        var vertexBatch, i;
        for (i = 0; i &lt; global.textures; i++)
            vertexBatch[i] = ds_list_create();
        //Start reading level file data 
        worldShape = c_shape_create();
        c_shape_begin_trimesh();
        var file = file_text_open_read("level.pnl");
        while !(file_text_eof(file))
        {
            number = level_read_real(file);
            switch (number)
            {
                case (0.1): //Geometry
                case (0.2): //Actors
                    header = number;
                break
            }
            if (room == rmTitle &amp;&amp; header == 0.2) break //Abort actors if level is in title screen
            if (number == header) continue
            switch (header)
            {
                case (0.1): //Geometry
                    var y1 = level_read_real(file), z1 = level_read_real(file), x2 = level_read_real(file), y2 = level_read_real(file), z2 = level_read_real(file), x3 = level_read_real(file), y3 = level_read_real(file), z3 = level_read_real(file), texture = level_read_real(file), realTexture = 1;
                    if (texture) //Align PN Editor's texture IDs to in-game IDs
                        realTexture = texture + 1;
                    for (i = 0; i &lt; global.textures; i++) //Loop through the textures to match the triangle's
                        if (i == realTexture)
                        {
                            if (ds_list_empty(vertexBatch[i])) //If this vertex batch is not made yet, make one
                                ds_list_add(vertexBatch[i], i, d3d_model_create());
                            var model = ds_list_find_value(vertexBatch[i], 1); //Get model from the vertex batch list
                            d3d_model_primitive_begin(model, pr_trianglelist);
                            if (x3 == number &amp;&amp; y3 == y1) //If the triangle is the upper half of a wall, map accordingly
                            {
                                d3d_model_vertex_texture(model, number, y1, z1, 0, 0);
                                d3d_model_vertex_texture(model, x2, y2, z1, point_distance(number, y1, x2, y2) / 16, 0);
                                d3d_model_vertex_texture(model, number, y1, z3, 0, -(z3 - z1) / 16);
                            }
                            else
                                if (x3 == x2 &amp;&amp; y3 == y2) //Check if lower half of a wall
                                {
                                    var hRepeat = point_distance(number, y1, x2, y2) / 16, vRepeat = (z2 - z1) / 16;
                                    d3d_model_vertex_texture(model, number, y1, z1, 0, vRepeat);
                                    d3d_model_vertex_texture(model, x2, y2, z2, hRepeat, 0);
                                    d3d_model_vertex_texture(model, x2, y2, z1, hRepeat, vRepeat);
                                }
                                else
                                {
                                    d3d_model_vertex_texture(model, number, y1, z1, number / 16, y1 / 16);
                                    d3d_model_vertex_texture(model, x2, y2, z2, x2 / 16, y2 / 16);
                                    d3d_model_vertex_texture(model, x3, y3, z3, x3 / 16, y3 / 16);
                                }
                            d3d_model_primitive_end(model);
                        }
                    c_shape_add_triangle(number, y1, z1, x2, y2, z2, x3, y3, z3);
                    global.minZ = min(global.minZ, z1, z2, z3);
                break
                case (0.2): //Actors
                    var yy = level_read_real(file), zz = level_read_real(file), dir = level_read_real(file), type = level_read_real(file), obj = objPlayerSpawn;
                    switch (type)
                    {
                        case (1):
                            obj = objGoomba;
                        break
                        case (2):
                            obj = objBomb;
                        break
                    }
                    with (instance_create(number, yy, obj))
                    {
                        z = zz + half;
                        faceDir = dir;
                    }
                break
            }
        }
        file_text_close(file);
        for (i = 0; i &lt; global.textures; i++)
            if (ds_list_empty(vertexBatch[i]))
                ds_list_destroy(vertexBatch[i]); //Delete vertex batch if there are no triangles stored
            else
            {
                ds_list_add(global.worldModel, vertexBatch[i]); //Add it to the world model otherwise
                show_debug_message("Added triangles to world model with texture " + string(ds_list_find_value(vertexBatch[i], 0)) + ", model ID " + string(ds_list_find_value(vertexBatch[i], 1)));
            }
        c_shape_end_trimesh(worldShape);
        worldObject = c_object_create(worldShape, 1, 1);
        global.world = c_world_create();
        c_world_add_object(worldObject);
        show_debug_message("Created world model");
    break
}
//Reset in-game states
if (global.dawn)
    audio_play_sound(musDawn, 1, false);
else
    music_start();
global.battle = false;
framerate_set();
discord_update_presence("0 backups collected", global.roomName, "largeicon" + string(global.roomIcon), "smallicon");
window_set_cursor(cr_default);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload game
ds_list_destroy(global.worldModel);
font_delete(global.messageFont);
discord_free_app();
discord_free_dll();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pause GUI
if (global.paused)
{
    draw_background(pauseBg, 0, 0);
    draw_set_alpha(0.51);
    draw_rectangle_colour(0, 0, view_wview[0], view_hview[0], c_black, c_black, c_black, c_black, false);
    draw_set_alpha(1);
}
pauseX = lerp_delta(pauseX, !global.paused * -463, 0.25);
var pX2 = 2 * pauseX + (800 * global.paused), character = bgPauseMario, font = fntMario;
if (global.link)
{
    character = bgPauseLink;
    font = fntLink;
}
draw_set_font(font);
draw_set_halign(fa_right);
draw_text_transformed(pX2 + 100, 200, "Paused", 2, 2, 0);
draw_set_halign(fa_left);
draw_set_font(-1);
draw_background(character, pauseX, 0);
draw_sprite_ext(sprIntro, global.link, pX2, 100, 0.5, 0.5, 0, c_white, 1);
draw_text(8, 8, string(round(lolfps)) + " FPS#" + string(global.link) + "#" + string(global.deltaTime) + "#" + string(setFramerate));
if (instance_exists(objPlayer))
{
    for (var i = 0; i &lt; array_length_1d(objPlayer.shadowMatrix); i++)
        draw_text(8, 64 + i * 10, string(objPlayer.shadowMatrix[i]));
    draw_text(64, 64, string(objPlayer.floorAngle));
    draw_text(64, 74, string(objPlayer.floorPitch));
    draw_sprite_ext(sprHealth, objPlayer.hp, view_wview[0] * 0.5, healthY, 2, 2, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.link = !global.link;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setFramerate = !setFramerate;
framerate_set();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
