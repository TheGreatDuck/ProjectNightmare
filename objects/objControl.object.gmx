<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load game
discord_init_dll();
discord_init_app("732560402873057320");
draw_set_circle_precision(64);
d3d_set_perspective(true);
d3d_set_hidden(true);
d3d_set_culling(true);
draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(0);
audio_falloff_set_model(audio_falloff_exponent_distance);
global.maxRender = 65536;
/*[CONTROL BINDS]
These are used by control to detect inputs. The 2D array indices are as follows:
0 - keyboard bind
1 - gamepad bind
2 - held
3 - pressed
4 - released
5 - axis, positive
6 - axis, negative
(Movement)*/
global.gamepad = false;
global.bind[0, 0] = ord("W"); //Up
global.bind[0, 1] = gp_axislv;
global.bind[1, 0] = ord("A"); //Left
global.bind[1, 1] = gp_axislh;
global.bind[2, 0] = ord("S"); //Down
global.bind[2, 1] = gp_axislv;
global.bind[3, 0] = ord("D"); //Right
global.bind[3, 1] = gp_axislh;
global.bind[4, 0] = vk_space; //Jump
global.bind[4, 1] = gp_face1;
global.bind[5, 0] = ord("X"); //Slidekick
global.bind[5, 1] = gp_face2;
global.bind[6, 0] = ord("E"); //Interact
global.bind[6, 1] = gp_face3;
global.bind[7, 0] = ord("Q"); //Make camera look from player
global.bind[7, 1] = gp_face4;
//(Camera)
global.bind[8, 0] = mb_left; //Free scroll
global.bind[8, 1] = gp_shoulderl;
global.bind[9, 0] = mb_right; //First person
global.bind[9, 1] = gp_shoulderr;
global.bind[10, 1] = gp_axisrv; //Camera up
global.bind[11, 1] = gp_axisrh; //Camera left
global.bind[12, 1] = gp_axisrv; //Camera down
global.bind[13, 1] = gp_axisrh; //Camera right
bind_input_clear();
//Prepare Custom Sprite Framework for loading sprites and backgrounds
image_system_init();
image_group_create("spr");
image_group_create("bg");
image_group_create("tex");
/*global.assets store the total amount of graphics stored in each image group.
The array indices specify the image group:
    0 - sprites
    1 - backgrounds
    2 - textures*/
for (i = 0; i &lt; 3; i++) global.assets[i] = 0;
/*Load sprites. They are mostly used by the GUI and Actors. The sprite files MUST be PNGs and numbered. Example: 0.png, 1.png, 2.png...
The variable data are as follows:
global.spr[id, data] - the sprite itself
    &lt;id&gt; is the ID of the texture (hardcoded limit of 32000)
    &lt;info&gt;
        0 - pointer of sprite
        1 - is a rotatable sprite
        2 - X offset
        3 - Y offset*/
image_stream_start("spr", 2048, 2048, 0, true, false);
var file = file_find_first(cDirSpr + "*.png", 0);
while (file != "")
{
    var slot = string_digits(file), table = file_text_open_read(cDirSpr + "ani.txt"), frames = 1, rotates = false, xOfs = 0, yOfs = 0, info;
    while !(file_text_eof(table)) //Look for animation data in the animation data table
    {
        info = string_parse(file_text_read_string(table), "|");
        if (info[| 0] == slot) //If the parsed string belongs to this sprite...
        {
            show_debug_message("Found animation data for sprite " + slot);
            frames = real(info[| 1]); //Set amount of frames this sprite has
            rotates = real(info[| 2]); //Set "rotatable" flag for sprite
            xOfs = real(info[| 3]); //Set X offset of sprite
            yOfs = real(info[| 4]); //Set Y offset of sprite
            ds_list_destroy(info);
            break
        }
        ds_list_destroy(info);
        file_text_readln(table);
    }
    //Close the lookup table after and add the sprites to the atlas
    file_text_close(table);
    image_stream_add("spr", slot, cDirSpr + file, frames, xOfs, yOfs);
    global.spr[real(slot), 1] = rotates;
    global.assets[0]++; //Add this to total sprites count
    file = file_find_next();
}
image_stream_finish("spr");
for (i = 0; i &lt; global.assets[0]; i++) global.spr[i, 0] = image_group_find_image("spr", string(i));
//Load backgrounds. They have no frames at all, so we can store way less data than sprites or textures.
image_stream_start("bg", 1024, 1024, 0, true, false);
var file = file_find_first(cDirBg + "*.png", 0);
while (file != "")
{
    image_stream_add("bg", string_digits(file), cDirBg + file, 1, 0, 0);
    global.assets[1]++; //Add this to total background count
    file = file_find_next();
}
image_stream_finish("bg");
for (i = 0; i &lt; global.assets[1]; i++) global.bg[i] = image_group_find_image("bg", string(i));
/*Load textures. The texture files MUST be PNGs and numbered. Example: 0.png, 1.png, 2.png...
The variable data are as follows:
global.tex[id, data] - the texture itself
    &lt;id&gt; is the ID of the texture (hardcoded limit of 32000)
    &lt;data&gt;
        0 - pointer of graphic
        1 - animation speed
        2... - the graphic as separate texture pointer(s) (hardcoded limit of 31998 frames)*/
image_stream_start("tex", 1024, 1024, 0, true, false);
file = file_find_first(cDirTex + "*.png", 0);
while (file != "")
{
    var slot = string_digits(file), table = file_text_open_read(cDirTex + "ani.txt"), frames = 1, spd = 1, info;
    while !(file_text_eof(table)) //Look for animation data in the animation data table
    {
        info = string_parse(file_text_read_string(table), "|");
        if (info[| 0] == slot) //If the parsed string belongs to this texture...
        {
            show_debug_message("Found animation data for texture " + slot);
            frames = real(info[| 1]); //Set amount of frames this texture has
            spd = real(info[| 2]); //Animation speed
            ds_list_destroy(info);
            break
        }
        ds_list_destroy(info);
        file_text_readln(table);
    }
    //Close the lookup table after and add the texture to the atlas
    file_text_close(table);
    image_stream_add_3d("tex", slot, cDirTex + file, frames, 0, 0);
    global.tex[real(slot), 1] = spd;
    global.assets[2]++; //Add this to total textures count
    file = file_find_next();
}
image_stream_finish("tex");
for (i = 0; i &lt; global.assets[2]; i++)
{
    global.tex[i, 0] = image_group_find_image("tex", string(i));
    for (j = 0; j &lt; image_get_number(global.tex[i, 0]); j++)
        global.tex[i, 2 + j] = image_get_texture(global.tex[i, 0], j); //Add frames to texture pointer array
}
/*Load fonts. The font files MUST be TTF/GIFs and numbered. Example: 0.ttf, 1.ttf, 2.gif...
A font will be stored into its own texture page. The engine can load a maximum of 10 fonts total, but you can edit the loader to raise the limit. (Why would a game have 10 different fonts, though?)
The variable data are as follows:
global.fnt[&lt;id&gt;, &lt;sprite&gt;]
    &lt;id&gt; - pointer of font
    &lt;sprite&gt; - pointer of font's sprite, -1 if TrueType*/
file = file_find_first(cDirFnt + "*", 0);
while (file != "")
{
    var slot = real(string_digits(file)), ext = string_copy(file, 3, 3);
    switch (ext)
    {
        case ("ttf"):
            global.fnt[slot, 0] = font_add(cDirFnt + file, 12, false, false, 32, 127);
            global.fnt[slot, 1] = -1;
            show_debug_message("Loading TrueType font, slot " + string(slot));
        break
        case ("gif"):
            global.fnt[slot, 1] = sprite_add(cDirFnt + file, 0, false, false, 0, 0);
            global.fnt[slot, 0] = font_add_sprite(global.fnt[slot, 1], ord("!"), true, 1);
            show_debug_message("Loading sprite font, slot " + string(slot));
        break
    }
    file = file_find_next();
}
//Load sounds. The sound files MUST be OGGs and numbered. Example: 0.ogg, 1.ogg, 2.ogg...
file = file_find_first(cDirSfx + "*.ogg", 0);
while (file != "")
{
    var slot = real(string_digits(file));
    global.snd[slot] = audio_create_stream(cDirSfx + file);
    file = file_find_next();
}
FMODGMS_Sys_Create();
FMODGMS_Sys_Initialize(1);
global.channel = FMODGMS_Chan_CreateChannel();
/*Load music. The music files MUST be any audio format supported by FMOD. Example: 0.ogg, 1.mp3, 2.mod...
In order to correctly assign loop points to tracks, the sample rate must be 44100 hz.
If a music track doesn't have any loop points, it will only play once.*/
var file = file_find_first(cDirBgm + "*", 0);
while (file != "")
{
    if (file == "loop.txt") break //Stupid workaround for mistakingly loading loop.txt as a music track
    var slot = string_digits(file), arraySlot = real(slot);
    global.mus[arraySlot] = FMODGMS_Snd_LoadSound(cDirBgm + file);
    var table = file_text_open_read(cDirBgm + "loop.txt"), info;
    while !(file_text_eof(table)) //Look for loop points in the music data table
    {
        info = string_parse(file_text_read_string(table), "|");
        if (info[| 0] == slot) //If the parsed string belongs to this track...
        {
            show_debug_message("Found loop points for music " + slot);
            FMODGMS_Snd_Set_LoopPoints(global.mus[arraySlot], FMODGMS_Util_SecondsToSamples(real(info[| 1]), 44100), FMODGMS_Util_SecondsToSamples(real(info[| 2]), 44100)); //Set loop points for track
            FMODGMS_Snd_Set_LoopMode(global.mus[arraySlot], 1, -1); //Set track to loop
            ds_list_destroy(info);
            break
        }
        ds_list_destroy(info);
        file_text_readln(table);
    }
    file_text_close(table); //Close the lookup table after
    file = file_find_next();
}
//Prepare 3D collision system
c_init();
worldShape = -1;
worldObject = -1;
global.world = -1;
/*global.worldModel is a list of 3D models that is rendered by using a fake "vertex batching" method
to give the illusion of displaying multiple textures on one whole model. Under the hood, it's only
rendering multiple models as parts of the world, depending on how many textures are used in the map.*/
global.worldModel = ds_list_create();
//Level properties
for (i = 0; i &lt; 2; i++)
{
    //Music slot 0 is the main level music. Set it to noone for silence.
    //Music slot 1 is used for battle music. Set it to noone for no battle music in levels.
    global.levelMusic[i] = noone;
    global.musicVolume[i] = !i;
}
global.skybox = 0; //The texture ID of the skybox.
global.battle = false; //Used for switching between normal and battle music.
global.dawn = false; //Used to play musDawn on level start. 
global.paused = false;
global.roomName = "Loading"; //Used for Discord Rich Presence
global.roomIcon = 0; //Also for RPC. The number corresponds to which large icon key should be used.
global.minZ = 0; //The minimal Z of the level. Used for deleting actors below this position.
global.deltaTime = 60 / 1000000 * delta_time;
global.defaultMatrix = matrix_build(0, 0, 0, 0, 0, 0, 1, 1, 1); //The default matrix. Used for resetting matrices back to default by recycling this variable.
pauseBg = -1;
pauseX = -463;
healthY = -46;
setFramerate = true; /*Sets the maximum framerate. The values are as follows:
false - 30
true - 60*/
display_set_gui_size(960, 540);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level music control &amp; delta timing
global.deltaTime = 60 / 1000000 * delta_time;
//Music control. Sets volume of each track accordingly while the game is unpaused
/*if (global.dawn)
    {if !(audio_is_playing(musDawn))
    {
        music_start();
        global.dawn = false;
    }}
else
    if !(global.paused)
    {
        if (global.levelMusic[global.battle] &amp;&amp; !global.musicVolume[global.battle])
        {
            global.musicVolume[global.battle] = 1;
            audio_sound_gain(global.levelMusic[global.battle], 1, 750);
        }
        if (global.levelMusic[!global.battle] &amp;&amp; global.musicVolume[!global.battle])
        {
            global.musicVolume[!global.battle] = 0;
            audio_sound_gain(global.levelMusic[!global.battle], 0, 750);
        }
    }
if (keyboard_check(vk_numpad0) &amp;&amp; keyboard_check_pressed(vk_numpad1) &amp;&amp; !audio_is_playing(musMosa))
{
    audio_stop_sound(musDawn);
    audio_stop_sound(global.levelMusic[0]);
    audio_stop_sound(global.levelMusic[1]);
    audio_play_sound(musMosa, 1, true);
}*/
//Toggle pause
if (bind_hardcode_pressed(vk_enter, gp_start) &amp;&amp; ((instance_exists(objPlayer) &amp;&amp; !cutscene_exists()) || global.paused) &amp;&amp; !audio_is_playing(global.snd[cSndPause]))
{
    audio_play_sound(global.snd[cSndPause], 0, false);
    global.paused = !global.paused;
    FMODGMS_Chan_Set_Volume(global.channel, 1 / (1 + 4 * global.paused));
    if (global.paused)
    {
        pauseBg = background_create_from_surface(application_surface, 0, 0, surface_get_width(application_surface), surface_get_height(application_surface), false, false);
        instance_deactivate_all(true);
        exit
    }
    else
    {
        background_delete(pauseBg);
        instance_activate_all();
    }
}
//Return to title screen
if (bind_hardcode_pressed(vk_escape, gp_select) &amp;&amp; instance_exists(objPlayer))
{
    room_goto(rmTitle);
    global.paused = false;
    exit
}
/*The game logic system: This synchronizes the game logic with delta time, allowing you
to play at any framerate. Instead of using step events, all objects use the according
User Defined events as their steps.*/
global.gamepad = gamepad_is_connected(0);
var i, clearInput = false;
for (i = 0; i &lt; 14; i++)
{
    var keyBind = global.bind[i, 0], conBind = global.bind[i, 1];
    if (global.gamepad)
    {
        switch (conBind)
        {
            //Check for analog sticks
            case (gp_axislh):
            case (gp_axisrh):
                bind_axis(i, false);
            break
            case (gp_axislv):
            case (gp_axisrv):
                bind_axis(i, true);
            break
            default: //Normal buttons
                global.bind[i, 2] = gamepad_button_check(0, conBind);
                global.bind[i, 5] = global.bind[i, 2];
                global.bind[i, 6] = global.bind[i, 2];
        }
        global.bind[i, 4] = gamepad_button_check_released(0, conBind);
    }
    else
    {
        switch (keyBind)
        {
            //Check if bound to mouse (same for Released)
            case (mb_left):
            case (mb_middle):
            case (mb_right):
                global.bind[i, 2] = mouse_check_button(keyBind);
                global.bind[i, 4] = mouse_check_button_released(keyBind);
            break
            default:
                global.bind[i, 2] = keyboard_check(keyBind); //Just key buttons
                global.bind[i, 4] = keyboard_check_released(keyBind);
        }
        global.bind[i, 5] = global.bind[i, 2];
        global.bind[i, 6] = global.bind[i, 2];
    }
    global.bind[i, 3] = bind_hardcode_pressed(keyBind, conBind);
}
while (global.deltaTime--)
{
    with (all)
    {
        event_user(14); //Begin Step
        event_user(13); //Step
        event_user(15); //End Step
    }
    //Input clear optimizations are used, since having to reset input values
    //every time global.deltaTime is 1+ is pointless.
    if !(clearInput)
    {
        bind_input_clear();
        clearInput = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update GUI elements
pauseX = lerp(pauseX, !global.paused * -463, 0.25);
healthY = lerp(healthY, -46 + 2 * (instance_exists(objPlayer) &amp;&amp; objPlayer.hp &lt; 8) * 46, 0.1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear map
if (c_world_exists()) c_world_destroy();
if (c_object_exists(worldObject)) c_object_destroy(worldObject);
if (c_shape_exists(worldShape)) c_shape_destroy(worldShape);
for (i = 0; i &lt; ds_list_size(global.worldModel); i++)
{
    var vertexBatch = ds_list_find_value(global.worldModel, i);
    if (ds_exists(vertexBatch, ds_type_list))
    {
        var modelID = ds_list_find_value(vertexBatch, 1);
        show_debug_message("Destroyed vertex batch with texture " + string(ds_list_find_value(vertexBatch, 0)) + ", model ID " + string(modelID));
        d3d_model_destroy(modelID);
        ds_list_destroy(vertexBatch);
    }
}
ds_list_clear(global.worldModel);
show_debug_message("Cleared world model");
if (background_exists(pauseBg))
{
    global.paused = false;
    background_delete(pauseBg);
}
audio_stop_all();
music_stop();
global.dawn = false;
global.skybox = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load map
switch (room)
{
    case (rmTitle):
        audio_sound_gain(global.levelMusic[0], 1, 0);
    case (rmMain):
        //Create separate d3d models for multiple textures
        var vertexBatch, i;
        for (i = 0; i &lt; global.assets[2]; i++)
            vertexBatch[i] = ds_list_create();
        //Start reading level file data 
        worldShape = c_shape_create();
        c_shape_begin_trimesh();
        var file = file_text_open_read("data\map\level.pnl");
        while !(file_text_eof(file))
        {
            number = level_read_real(file);
            switch (number)
            {
                case (0.1): //Geometry
                case (0.2): //Actors
                    header = number;
                break
            }
            if (room == rmTitle &amp;&amp; header == 0.2) break //Abort actors if level is in title screen
            if (number == header) continue
            switch (header)
            {
                case (0.1): //Geometry
                    var y1 = level_read_real(file), z1 = level_read_real(file), x2 = level_read_real(file), y2 = level_read_real(file), z2 = level_read_real(file), x3 = level_read_real(file), y3 = level_read_real(file), z3 = level_read_real(file), texture = level_read_real(file), realTexture = 1;
                    if (texture) //Align PN Editor's texture IDs to in-game IDs
                        realTexture = texture + 1;
                    for (i = 0; i &lt; global.assets[2]; i++) //Loop through the textures to match the triangle's
                        if (i == realTexture)
                        {
                            if (ds_list_empty(vertexBatch[i])) //If this vertex batch is not made yet, make one
                                ds_list_add(vertexBatch[i], i, d3d_model_create());
                            var model = ds_list_find_value(vertexBatch[i], 1); //Get model from the vertex batch list
                            d3d_model_primitive_begin(model, pr_trianglelist);
                            if (x3 == number &amp;&amp; y3 == y1) //If the triangle is the upper half of a wall, map accordingly
                            {
                                d3d_model_vertex_texture(model, number, y1, z1, 0, 0);
                                d3d_model_vertex_texture(model, x2, y2, z1, point_distance(number, y1, x2, y2) / 16, 0);
                                d3d_model_vertex_texture(model, number, y1, z3, 0, -(z3 - z1) / 16);
                            }
                            else
                                if (x3 == x2 &amp;&amp; y3 == y2) //Check if lower half of a wall
                                {
                                    var hRepeat = point_distance(number, y1, x2, y2) / 16, vRepeat = (z2 - z1) / 16;
                                    d3d_model_vertex_texture(model, number, y1, z1, 0, vRepeat);
                                    d3d_model_vertex_texture(model, x2, y2, z2, hRepeat, 0);
                                    d3d_model_vertex_texture(model, x2, y2, z1, hRepeat, vRepeat);
                                }
                                else
                                {
                                    d3d_model_vertex_texture(model, number, y1, z1, number / 16, y1 / 16);
                                    d3d_model_vertex_texture(model, x2, y2, z2, x2 / 16, y2 / 16);
                                    d3d_model_vertex_texture(model, x3, y3, z3, x3 / 16, y3 / 16);
                                }
                            d3d_model_primitive_end(model);
                        }
                    c_shape_add_triangle(number, y1, z1, x2, y2, z2, x3, y3, z3);
                    global.minZ = min(global.minZ, z1, z2, z3);
                break
                case (0.2): //Actors
                    var yy = level_read_real(file), zz = level_read_real(file), dir = level_read_real(file), type = level_read_real(file), obj = objPlayerSpawn;
                    switch (type)
                    {
                        case (1):
                            obj = objGoomba;
                        break
                        case (2):
                            obj = objBomb;
                        break
                    }
                    with (instance_create(number, yy, obj))
                    {
                        z = zz + half;
                        faceDir = dir;
                    }
                break
            }
        }
        file_text_close(file);
        for (i = 0; i &lt; global.assets[2]; i++)
            if (ds_list_empty(vertexBatch[i]))
                ds_list_destroy(vertexBatch[i]); //Delete vertex batch if there are no triangles stored
            else
            {
                ds_list_add(global.worldModel, vertexBatch[i]); //Add it to the world model otherwise
                show_debug_message("Added triangles to world model with texture " + string(ds_list_find_value(vertexBatch[i], 0)) + ", model ID " + string(ds_list_find_value(vertexBatch[i], 1)));
            }
        c_shape_end_trimesh(worldShape);
        worldObject = c_object_create(worldShape, 1, 1);
        global.world = c_world_create();
        c_world_add_object(worldObject);
        show_debug_message("Created world model");
    break
}
//Reset in-game states
music_start();
global.battle = false;
framerate_set();
discord_update_presence("0 backups collected", global.roomName, "largeicon" + string(global.roomIcon), "smallicon");
window_set_cursor(cr_default);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload game
ds_list_destroy(global.worldModel);
for (var i = 0, n = array_height_2d(global.fnt); i &lt; n; i++)
{
    font_delete(global.fnt[i, 0]);
    if (global.fnt[i, 1]) sprite_delete(global.fnt[i, 1]);
}
for (var i = 0, n = array_length_1d(global.snd); i &lt; n; i++) audio_destroy_stream(global.snd[i]);
FMODGMS_Sys_Close();
discord_free_app();
discord_free_dll();
image_group_destroy("spr");
image_group_destroy("bg");
image_group_destroy("tex");
image_system_cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pause GUI
if (global.paused) draw_background_ext(pauseBg, 0, 0, display_get_gui_width() / background_get_width(pauseBg), display_get_gui_height() / background_get_height(pauseBg), 0, make_color_rgb(128, 128, 128), 1);
var pX2 = 2 * pauseX + (800 * global.paused);
draw_set_font(global.fnt[cFntMario, 0]);
draw_set_halign(fa_right);
draw_text_transformed(pX2 + 100, 200, "Paused", 2, 2, 0);
draw_set_halign(fa_left);
draw_set_font(-1);
draw_image(global.bg[cBgPauseMario], 0, pauseX, 0);
draw_image_ext(global.spr[cSprIntro, 0], 0, pX2, 100, 0.5, 0.5, 0, c_white, 1);
draw_text(8, 8, string(round(fps_real)) + " FPS#" + string(global.deltaTime) + "#" + string(setFramerate));
if (instance_exists(objPlayer)) draw_image_ext(global.spr[cSprHealth, 0], objPlayer.hp, view_wview[0] * 0.5, healthY, 2, 2, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var getFull = window_get_fullscreen();
if (getFull) surface_resize(application_surface, 960, 540);
else surface_resize(application_surface, display_get_width(), display_get_height());
window_set_fullscreen(!getFull);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_reset((display_aa != 4) * 4, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setFramerate = !setFramerate;
framerate_set();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
