<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load game
//Load textures. These will mostly be backgrounds.
global.textures = 0;
texture_background_load(btSkybox);
texture_background_load(btTile);
texture_background_load(btGrass);
texture_background_load(btStairs);
texture_background_load(btStairs2);
texture_background_load(btStairs3);
texture_background_load(btStairs4);
texture_background_load(btFence);
texture_background_load(btCarpet);
c_init();
worldShape = -1;
worldObject = -1;
global.world = -1;
/*Geometry types are stored in global.worldModel. They will also contain a list with their position:
0 - floor
1 - wall*/
global.worldModel = ds_list_create();
//Level properties
for (var i = 0; i &lt; 2; i++)
    global.levelMusic[i] = noone;
global.musicVolume[0] = 1; //Music slot 0 is the main level music. Set it to noone for silence.
global.musicVolume[1] = 0; //Music slot 1 is used for battle music. Set it to noone for no battle music in levels.
global.skybox = 0; //The texture ID of the skybox.
global.battle = false; //Used for switching between normal and battle music.
global.dawn = false; //Used to play musDawn on level start. 
global.paused = false;
global.roomName = "Loading"; //Used for Discord Rich Presence
global.roomIcon = 0; //Also for RPC. The number corresponds to which large icon key should be used.
global.minZ = 0; //The minimal Z of the level. Used for deleting actors below this position.
global.messageFont = font_add_sprite(sprFont, ord("!"), true, 1);
global.deltaTime = 60 / 1000000 * delta_time;
pauseBg = -1;
pauseX = -463;
healthY = -46;
lolfps = fps_real;
timer_create();
timer[0] = 60;
setFramerate = true; /*Sets the maximum framerate. The values are as follows:
false - 30
true - 60*/
display_set_gui_size(960, 540);
gameLoop = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level music control &amp; delta timing
global.deltaTime = 60 / 1000000 * delta_time;
//Music control. Sets volume of each track accordingly while the game is unpaused
if (global.dawn)
{
    if !(audio_is_playing(musDawn))
    {
        music_start();
        global.dawn = false;
    }
}
else
    if !(global.paused)
    {
        if (global.levelMusic[global.battle] &amp;&amp; !global.musicVolume[global.battle])
        {
            global.musicVolume[global.battle] = 1;
            audio_sound_gain(global.levelMusic[global.battle], 1, 750);
        }
        if (global.levelMusic[!global.battle] &amp;&amp; global.musicVolume[!global.battle])
        {
            global.musicVolume[!global.battle] = 0;
            audio_sound_gain(global.levelMusic[!global.battle], 0, 750);
        }
    }
if (keyboard_check(vk_numpad0) &amp;&amp; keyboard_check_pressed(vk_numpad1) &amp;&amp; !audio_is_playing(musMosa))
{
    audio_stop_sound(musDawn);
    audio_stop_sound(global.levelMusic[0]);
    audio_stop_sound(global.levelMusic[1]);
    audio_play_sound(musMosa, 1, true);
}
/*The game logic system. This synchronizes the game logic with delta time, allowing you
to play at any framerate. Instead of using step events, all objects use the according
User Defined events as their steps.*/
gameLoop += global.deltaTime;
while (gameLoop)
{
    with (all)
    {
        event_user(14); //Begin Step
        event_user(13); //Step
        event_user(15); //End Step
    }
    gameLoop--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update FPS counter
if (timer_tick(0))
{
    lolfps = fps_real;
    timer[0] = 60;
}
healthY = lerp(healthY, -46 + 2 * (instance_exists(objPlayer) &amp;&amp; objPlayer.hp &lt; 8) * 46, 0.1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear map
if (c_world_exists())
    c_world_destroy();
if (c_object_exists(worldObject))
    c_object_destroy(worldObject);
if (c_shape_exists(worldShape))
    c_shape_destroy(worldShape);
ds_list_clear(global.worldModel);
if (background_exists(pauseBg))
{
    global.paused = false;
    background_delete(pauseBg);
}
audio_stop_all();
global.dawn = false;
global.skybox = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load map
worldShape = c_shape_create();
c_shape_begin_trimesh();
d3d_model_primitive_begin(global.worldModel, pr_trianglelist);
var file = file_text_open_read("level.pnl");
while (true)
{
    var str = file_text_read_string(file);
    if (str == "") break //End of file
    var x1 = real(str);
    file_text_readln(file);
    var y1 = level_get_vertex_data(file), z1 = level_get_vertex_data(file), x2 = level_get_vertex_data(file), y2 = level_get_vertex_data(file), z2 = level_get_vertex_data(file), x3 = level_get_vertex_data(file), y3 = level_get_vertex_data(file), z3 = level_get_vertex_data(file), texture = level_get_vertex_data(file), realTexture = 1;
    if (texture)
        realTexture = 2;
    ds_list_add(global.worldModel, x1, y1, z1, x2, y2, z2, x3, y3, z3, realTexture);
    c_shape_add_triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3);
    global.minZ = min(global.minZ, z1, z2, z3);
}
file_text_close(file);
d3d_model_primitive_end(global.worldModel);
c_shape_end_trimesh(worldShape);
worldObject = c_object_create(worldShape, 1, 1);
global.world = c_world_create();
c_world_add_object(worldObject);
show_debug_message("Done");
//Reset in-game states
if (global.dawn)
    audio_play_sound(musDawn, 1, false);
else
    music_start();
global.battle = false;
if (room == rmTitle)
    audio_sound_gain(global.levelMusic[0], 1, 0);
framerate_set();
discord_update_presence("0 backups collected", global.roomName, "largeicon" + string(global.roomIcon), "smallicon");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload game
ds_list_destroy(global.worldModel);
font_delete(global.messageFont);
discord_free_app();
discord_free_dll();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pause GUI
if (global.paused)
{
    draw_background(pauseBg, 0, 0);
    draw_set_alpha(0.51);
    draw_rectangle_colour(0, 0, view_wview[0], view_hview[0], c_black, c_black, c_black, c_black, false);
    draw_set_alpha(1);
}
pauseX = lerp_delta(pauseX, !global.paused * -463, 0.25);
var pX2 = 2 * pauseX + (800 * global.paused), character = bgPauseMario, font = fntMario;
if (global.link)
{
    character = bgPauseLink;
    font = fntLink;
}
draw_set_font(font);
draw_set_halign(fa_right);
draw_text_transformed(pX2 + 100, 200, "Paused", 2, 2, 0);
draw_set_halign(fa_left);
draw_set_font(-1);
draw_background(character, pauseX, 0);
draw_sprite_ext(sprIntro, global.link, pX2, 100, 0.5, 0.5, 0, c_white, 1);
draw_text(8, 8, string(round(lolfps)) + " FPS#" + string(global.link) + "#" + string(global.deltaTime) + "#" + string(setFramerate));
if (instance_exists(objPlayer))
{
    for (var i = 0; i &lt; array_length_1d(objPlayer.shadowMatrix); i++)
        draw_text(8, 64 + i * 10, string(objPlayer.shadowMatrix[i]));
    draw_text(64, 64, string(objPlayer.floorAngle));
    draw_text(64, 74, string(objPlayer.floorPitch));
    draw_sprite_ext(sprHealth, objPlayer.hp, view_wview[0] * 0.5, healthY, 2, 2, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.link = !global.link;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setFramerate = !setFramerate;
framerate_set();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to title screen
if (instance_exists(objPlayer))
{
    room_goto(rmTitle);
    global.paused = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle pause
if (((instance_exists(objPlayer) &amp;&amp; !cutscene_exists()) || global.paused) &amp;&amp; !audio_is_playing(sndPause))
{
    audio_play_sound(sndPause, 0, false);
    global.paused = !global.paused;
    audio_sound_gain(global.levelMusic[global.battle], 1 / (1 + 4 * global.paused), 100);
    if (global.paused)
    {
        pauseX = 1000;
        pauseBg = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], false, false);
        instance_deactivate_all(true);
    }
    else
    {
        background_delete(pauseBg);
        instance_activate_all();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
