<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load game
//Load in the textures. These will mostly be background graphics.
texture_background_load(0,btSkybox);
texture_background_load(1,btShadow);
texture_background_load(2,btTile);
texture_background_load(3,btGrass);
texture_background_load(4,btStairs);
texture_background_load(5,btStairs2);
texture_background_load(6,btStairs3);
texture_background_load(7,btStairs4);
//Load in sprites. These are a different type of textures and are animated.
texture_sprite_load(0,stMario);
texture_sprite_load(1,stMarioRun);
texture_sprite_load(2,stMarioJump);
texture_sprite_load(3,stMarioBlink);
c_init();
worldShape=-1;
worldObject=-1;
global.world=-1;
/*Geometry types are stored in global.worldModel. They will also contain a list with
their position:
0 - floor
1 - wall*/
global.worldModel=ds_list_create();
audio_falloff_set_model(audio_falloff_exponent_distance);
//Level properties
for (var i=0;i&lt;2;i++)
    global.levelMusic[i]=noone;
/*Music slot 0 is the main level music. Set it to noone for silence.
Music slot 1 is used for battle music. Set it to noone for no battle music in levels.*/
global.musicVolume[0]=1;
global.musicVolume[1]=0;
//global.battle is used for toggling the music. 
global.battle=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.levelMusic[global.battle] &amp;&amp; !global.musicVolume[global.battle])
{
    global.musicVolume[global.battle]=1;
    audio_sound_gain(global.levelMusic[global.battle],1,750);
}
if (global.levelMusic[!global.battle] &amp;&amp; global.musicVolume[!global.battle])
{
    global.musicVolume[!global.battle]=0;
    audio_sound_gain(global.levelMusic[!global.battle],0,750);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear map
if (c_world_exists())
    c_world_destroy();
if (c_object_exists(worldObject))
    c_object_destroy(worldObject);
if (c_shape_exists(worldShape))
    c_shape_destroy(worldShape);
for (var i=0;i&lt;ds_list_size(global.worldModel);i++)
    ds_list_destroy(ds_list_find_value(global.worldModel,i));
ds_list_clear(global.worldModel);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load map
worldShape=c_shape_create();
c_shape_begin_trimesh();
globalvar worldFloor,worldWall;
with (objFloor)
{
    var x1,y1,z1,x2,y2,z2;
    //The floor is rendered based on its slope direction
    switch (dir)
    {
        case (0):
        case (1):
            x1=x;
            y1=y;
            z1=z;
            x2=x+sprite_width;
            y2=y+sprite_height;
            z2=z+height;
        break
        case (2):
        case (3):
            x1=x;
            y1=y;
            z1=z+height;
            x2=x+sprite_width;
            y2=y+sprite_height;
            z2=z;
        break
    }
    //Add geometry type header
    worldFloor[id]=ds_list_create();
    ds_list_add(worldFloor[id],0,tex,dir,ceiling,x1,y1,z1,x2,y2,z2);
    ds_list_add(global.worldModel,worldFloor[id]);
    show_debug_message("Model wall "+string(id));
    if (height==0 || ceiling)
    {
        if (dir==1 &amp;&amp; dir==3)
        {
            c_shape_add_triangle(x1,y1,z1,x2,y1,z1,x1,y2,z2);
            c_shape_add_triangle(x2,y1,z1,x2,y2,z2,x1,y2,z2);
        }
        else
        {
            c_shape_add_triangle(x1,y1,z1,x2,y1,z2,x1,y2,z1);
            c_shape_add_triangle(x2,y1,z2,x2,y2,z2,x1,y2,z1);
        }
        show_debug_message("Collision floor "+string(id));
        instance_destroy();
    }
    else
        show_debug_message("Collision slope "+string(id));
}
with (objWall)
{
    var lenX=lengthdir_x(sprite_width,image_angle),
        lenY=lengthdir_y(sprite_width,image_angle);
    var x2=x+lenX,y2=y+lenY,z2=z+height;
    //Add geometry type header
    worldWall[id]=ds_list_create();
    ds_list_add(worldWall[id],1,tex,slope,x,y,z,x2,y2,z2);
    ds_list_add(global.worldModel,worldWall[id]);
    show_debug_message("Model wall "+string(id));
    //The wall is rendered based on slope direction
    switch (slope)
    {
        case (0):
            c_shape_add_triangle(x,y,z2,x2,y2,z,x,y,z);
            c_shape_add_triangle(x,y,z2,x2,y2,z2,x2,y2,z);
            show_debug_message("Collision wall "+string(id));
        break
        case (1):
            c_shape_add_triangle(x,y,z2,x2,y2,z,x,y,z);
            show_debug_message("Collision slope 1 wall "+string(id));
        break
        case (2):
            c_shape_add_triangle(x2,y2,z2,x2,y2,z,x,y,z);
            show_debug_message("Collision slope 2 wall "+string(id));
        break
    }
    instance_destroy();
}
c_shape_end_trimesh(worldShape);
worldObject=c_object_create(worldShape,1,1);
global.world=c_world_create();
c_world_add_object(worldObject);
show_debug_message("Done");
//Reset in-game states
for (var i=0;i&lt;2;i++)
    if (global.levelMusic[i])
    {
        global.musicVolume[i]=i==0;
        audio_sound_gain(global.levelMusic[i],global.musicVolume[i],0);
        audio_play_sound(global.levelMusic[i],0,1);
    }
global.battle=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload game
ds_list_destroy(global.worldModel);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
