<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NPCs are pawns that can store messages or be used in cutscenes. Later on you will also be
//able to store cutscene data in them. For now, they can be used for messages.
event_inherited();
fSolid = true;
rotate = true;
//NPC data
message[0] = "...";
idleSprite = 0;
talkSprite = 4;
working = false;
startDir = 0; //I don't get why this doesn't work.
//Create the hitbox based on the NPC's sprite boundaries
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Post-initialize variables
radius = (global.sSize[idleSprite, 0] * 0.5) * scale;
height = global.sSize[idleSprite, 1] * scale;
hitbox_create();
faceDir = startDir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (working)
{
    if (instance_exists(objPlayer))
        faceDir += turn_to_angle(point_direction(x, y, objPlayer.x, objPlayer.y), 1, faceDir);
    if !(cutscene_exists())
        working = false;
    sprite = talkSprite;
    frameSpd = 0.2;
}
else
{
    faceDir += turn_to_angle(startDir, 1, faceDir);
    sprite = idleSprite;
    frameSpd = 0.05;
    if (instance_exists(objPlayer) &amp;&amp; objPlayer.fOnGround &amp;&amp; keyboard_check_pressed(ord("E")))
    {
        var distance = point_distance_3d(x, y, z, objPlayer.x, objPlayer.y, objPlayer.z), dir = point_direction(x, y, objPlayer.x, objPlayer.y);
        if (distance &lt; radius + 16 &amp;&amp; abs(angle_difference(dir, faceDir)) &lt; 60)
        {
            objPlayer.faceDir = point_direction(objPlayer.x, objPlayer.y, x, y);
            var distanceDir = objPlayer.faceDir - 90, distanceHalf = distance * 0.5, xx = x + lengthdir_x(distanceHalf, dir) + lengthdir_x(32, distanceDir), yy = y + lengthdir_y(distanceHalf, dir) + lengthdir_y(32, distanceDir);
            working = true;
            with (instance_create(objCamera.x, objCamera.y, objCutscene))
            {
                z = objCamera.z;
                direction = objCamera.faceDir;
                pitch = objCamera.pitch;
                cutscene_create();
                cutscene_camera(xx, yy, other.z - 4, point_direction(xx, yy, other.x, other.y), 0, 60)
                cutscene_wait(20);
                //Add messages manually, because cutscene_message only allows string inputs.
                ds_list_add(list, 3);
                var strings = ds_list_create();
                for (var i = 0; i &lt; array_length_1d(other.message); i++)
                    ds_list_add(strings, other.message[i]);
                ds_list_add(list, strings);
                cutscene_wait_message();
                cutscene_wait(10);
                cutscene_end();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
