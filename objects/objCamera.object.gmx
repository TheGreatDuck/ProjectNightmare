<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up camera
event_inherited();
d3d_start();
d3d_set_perspective(true);
d3d_set_culling(true);
draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(128);
global.cX=0;
global.cY=0;
global.cZ=32;
global.cD=0;
global.cP=0;
//Target must be objActor child
target=objPlayer;
range=64;
pitch=0;
radius=1;
height=2;
fGravity=false;
fVisible=false;
fGhost=true;
fShadow=false;
//Set first person zooming
look=false;
sensX=10;
sensY=10;
audio_emitter_free(emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Normalize direction
faceDir=angle_normalize(faceDir);
global.cD=faceDir;
global.cP=pitch;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attach camera to target
if (instance_exists(target))
{
    //ready up target coordinates
    var tX=target.x,tY=target.y,tRZ=target.z,tZS=target.zSpeed,tSZ=target.shadowZ+(target.height*0.5),tZ=tSZ;
    if (tZS&lt;-2.5 || tZS&gt;2.5 || tSZ==-65536 || tRZ&gt;tSZ+32)
            tZ=tRZ;
    //toggle looking
    if (mouse_check_button_pressed(mb_right))
    {
        look=!look;
        target.fVisible=!look;
        pitch=0;
        var zoom=sndCameraOut;
        if (look)
        {
            zoom=sndCameraIn;
            faceDir=target.faceDir;
        }
        else
            target.faceDir=faceDir;
        audio_play_sound(zoom,1,false);
    }
    //camera mechanic
    if (look)
    {
        //not ideal, but still: allows smooth transition from 3rd to 1st person
        global.cX=lerp(global.cX,tX,0.2);
        global.cY=lerp(global.cY,tY,0.2);
        global.cZ=lerp(global.cZ,tRZ+4,0.2);
        //mouselook
        if (window_has_focus())
        {
            var gX=display_mouse_get_x(),gW=display_get_width()*0.5,
                gY=display_mouse_get_y(),gH=display_get_height()*0.5;
            faceDir-=(gX-gW)/sensX;
            pitch=clamp(pitch-((gY-gH)/sensY),-89.95,89.95);
            display_mouse_set(gW,gH);
        }
    }
    else
    {
        //set the increments of the camera to zoom out for 3rd person
        var incX=lengthdir_x(range,faceDir),incY=lengthdir_y(range,faceDir);
        //if there is a block behind...
        if (c_raycast_world(tX,tY,tRZ,tX-incX,tY-incY,tRZ,1))
        {
            var dist=point_distance(global.cX,global.cY,c_hit_x(),c_hit_y());
            incX=lengthdir_x(dist,faceDir);
            incY=lengthdir_y(dist,faceDir);
        }
        //smooth turning
        global.cX=lerp(global.cX,tX-incX,0.18);
        global.cY=lerp(global.cY,tY-incY,0.18);
        global.cZ=lerp(global.cZ,tZ+32,0.1);
        x=global.cX;
        y=global.cY;
        z=global.cZ;
        if (keyboard_check_pressed(ord("Q")))
        {
            faceDir=target.faceDir;
            audio_play_sound(sndCameraSpin,1,false);
        }
        pitch=clamp(pitch+turn_to_angle(point_pitch(global.cX,global.cY,global.cZ,tX,tY,
                    tZ+12),1,pitch),-89.5,89.5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off D3D
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rendering
draw_set_color(c_white);
var dir=degtorad(global.cD),cSin=sin(dir),cCos=cos(dir),cTan=tan(degtorad(pitch)),
    xTo=global.cX+cCos,yTo=global.cY-cSin,zTo=global.cZ+cTan;
d3d_set_projection_ext(global.cX,global.cY,global.cZ,xTo,yTo,zTo,0,0,1,45,
                       view_wview[0]/view_hview[0],1,65536);
audio_listener_position(global.cX,global.cY,global.cZ);
audio_listener_orientation(-cCos,cSin,cTan,0,0,1);
//Draw the skybox
d3d_set_zwriteenable(false);
d3d_draw_ellipsoid(global.cX+128,global.cY+128,global.cZ+256,global.cX-128,global.cY-128,
                   global.cZ-256,global.tex[0],1,-1,32);
d3d_set_zwriteenable(true);
//Draw world model
texture_set_repeat(true);
for (var i=0;i&lt;ds_list_size(global.worldModel);i++)
{
    var object=ds_list_find_value(global.worldModel,i),
        texSlot=ds_list_find_value(object,1),tex=global.tex[texSlot],
        val=ds_list_find_value(object,2);
    //Check geometry type header
    switch (ds_list_find_value(object,0))
    {
        //Floor
        case (0):
            var val2=ds_list_find_value(object,3),x1=ds_list_find_value(object,4),
                y1=ds_list_find_value(object,5),z1=ds_list_find_value(object,6),
                x2=ds_list_find_value(object,7),y2=ds_list_find_value(object,8),
                z2=ds_list_find_value(object,9),x3=ds_list_find_value(object,10),
                hR=(x2-x1)/global.tSize[texSlot,0],vR=(y2-y1)/global.tSize[texSlot,1];
            if !(is_undefined(x3))
            {
                var y3=ds_list_find_value(object,11),z3=ds_list_find_value(object,12),
                    h1=min(x1,x2,x3),v1=min(y1,y2,y3),h2=max(x1,x2,x3),v2=max(y1,y2,y3);
                hR=(h2-h1)/global.tSize[texSlot,0];
                vR=(v2-v1)/global.tSize[texSlot,1];
                if (rectangle_in_view(h1,v1,h2,v2))
                {
                    d3d_primitive_begin_texture(pr_trianglelist,tex);
                    if (val2)
                    {
                        d3d_vertex_texture(x3,y3,z3,0,-vR);
                        d3d_vertex_texture(x2,y2,z2,hR,0);
                        d3d_vertex_texture(x1,y1,z1,0,0); 
                    }
                    else
                    {
                        d3d_vertex_texture(x1,y1,z1,0,0);
                        d3d_vertex_texture(x2,y2,z2,hR,0);
                        d3d_vertex_texture(x3,y3,z3,0,vR);
                    }
                    d3d_primitive_end();
                }
            }
            else
                if (val==1 || val==3)
                    {if (rectangle_in_view(x1,y1,x2,y2))
                    {
                        d3d_primitive_begin_texture(pr_trianglelist,tex);
                        if (val2)
                        {
                            d3d_vertex_texture(x1,y2,z1,0,vR);
                            d3d_vertex_texture(x2,y1,z2,-hR,0);
                            d3d_vertex_texture(x1,y1,z2,0,0);
                            d3d_vertex_texture(x1,y2,z1,0,vR);
                            d3d_vertex_texture(x2,y2,z1,-hR,vR);
                            d3d_vertex_texture(x2,y1,z2,-hR,0);
                            
                        }
                        else
                        {
                            d3d_vertex_texture(x1,y1,z2,0,0);
                            d3d_vertex_texture(x2,y1,z2,hR,0);
                            d3d_vertex_texture(x1,y2,z1,0,vR);
                            d3d_vertex_texture(x2,y1,z2,hR,0);
                            d3d_vertex_texture(x2,y2,z1,hR,vR);
                            d3d_vertex_texture(x1,y2,z1,0,vR);
                        }
                        d3d_primitive_end();
                    }}
                else
                    if (val2)
                    {if (rectangle_in_view(x1,y1,x2,y2))
                    {
                        d3d_primitive_begin_texture(pr_trianglelist,tex);
                        d3d_vertex_texture(x1,y1,z1,0,0);
                        d3d_vertex_texture(x1,y2,z1,0,vR);
                        d3d_vertex_texture(x2,y1,z2,-hR,0);
                        d3d_vertex_texture(x1,y2,z1,0,vR);
                        d3d_vertex_texture(x2,y2,z2,-hR,vR);
                        d3d_vertex_texture(x2,y1,z2,-hR,0);
                        d3d_primitive_end();
                    }}
                    else
                        draw_floor(x1,y1,z1,x2,y2,z2,tex,false,hR,vR);
        break
        //Wall
        case (1):
            var x1=ds_list_find_value(object,3),y1=ds_list_find_value(object,4),
                z1=ds_list_find_value(object,5),x2=ds_list_find_value(object,6),
                y2=ds_list_find_value(object,7),z2=ds_list_find_value(object,8),
                hR=point_distance(x1,y1,x2,y2)/global.tSize[texSlot,0],
                vR=(z2-z1)/global.tSize[texSlot,1];
            switch (val)
            {
                case (0):
                    draw_wall(x1,y1,z2,x2,y2,z1,tex,false,hR,vR);
                break
                case (1):
                    if (rectangle_in_view(x1,y1,x2,y2))
                    {
                        d3d_primitive_begin_texture(pr_trianglelist,tex);
                        d3d_vertex_texture(x1,y1,z2,0,0);
                        d3d_vertex_texture(x2,y2,z1,hR,vR);
                        d3d_vertex_texture(x1,y1,z1,0,vR);
                        d3d_primitive_end();
                    }
                break
                case (2):
                    if (rectangle_in_view(x1,y1,x2,y2))
                    {
                        d3d_primitive_begin_texture(pr_trianglelist,tex);
                        d3d_vertex_texture(x2,y2,z2,hR,0);
                        d3d_vertex_texture(x2,y2,z1,hR,vR);
                        d3d_vertex_texture(x1,y1,z1,0,vR);
                        d3d_primitive_end();
                    }
                break
            }
        break
    }
}
texture_set_repeat(false);
//Draw actors
with (objActor)
{
    if (fVisible &amp;&amp; sprite!=-1)
    {
        var w=global.sSize[sprite,0]*0.5,h=global.sSize[sprite,1]*0.5,cFrame;
        if (rotate)
        {
            var dir=(round((point_direction(x,y,global.cX,global.cY)-faceDir)/90)) mod
                    (4);
            while (dir&lt;0)
                dir+=4;
            cFrame=(global.sFrames[sprite,0]*dir)+frame;
        }
        else
            cFrame=frame;
        draw_wall(x-w*cSin,y-w*cCos,z+h+8,x+w*cSin,y+w*cCos,z-h+8,
                      global.spr[sprite,cFrame],false,1,1);
    }
    if (fShadow &amp;&amp; shadowZ!=-65536)
    {
        draw_set_alpha(0.51);
        d3d_transform_add_rotation_z(shadowDir*90);
        d3d_transform_add_translation(x,y,shadowZ);
        var lenY=radius*dtan(shadowPitch);
        draw_floor(-radius,-radius,-lenY,radius,radius,lenY,global.tex[1],true,1,1);
        d3d_transform_set_identity();
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
