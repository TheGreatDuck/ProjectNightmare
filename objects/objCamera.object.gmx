<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up camera
event_inherited();
d3d_start();
target = objPlayer; //Target must be objActor child
range = 80;
pitch = 0;
radius = 1;
height = 2;
fGravity = false;
fVisible = false;
fGhost = true;
fShadow = false;
//Set first person zooming
look = false;
free = false;
sensX = 10;
sensY = 10;
previousZ = 0;
//Set global variables
global.cX = 0;
global.cY = 0;
global.cZ = 0;
global.cD = 0;
global.cP = 0;
audio_emitter_free(emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Normalize direction
faceDir = angle_normalize(faceDir);
global.cD = faceDir;
global.cP = pitch;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attach camera to target
var cursor = cr_default;
if (free || look)
    cursor = cr_none;
window_set_cursor(cursor);
if (target &amp;&amp; instance_exists(target))
{
    if (cutscene_exists())
    {
        free = false;
        look = false;
        target.fVisible = true;
    }
    if (!cutscene_exists() || (cutscene_exists() &amp;&amp; global.follow))
    {
        //Ready up target coordinates
        var tX = target.x, tY = target.y, tRZ = target.bottom, tZ = tRZ, tZS = target.zSpeed, tSZ = target.shadowZ, tD = target.faceDir;
        tZ = previousZ;
        if (target.fOnGround &amp;&amp; tSZ != -65536)
            previousZ = tSZ;
        if (tRZ &lt; previousZ - 10|| tRZ &gt; previousZ + 40)
            tZ = tRZ;
        if (target.hp &amp;&amp; !cutscene_exists())
        {
            //Toggle freelook
            if (mouse_check_button_pressed(mb_left))
            {
                free = !free;
                target.fVisible = true;
                look = false;
                var zoom = sndCameraOut;
                if (free)
                    zoom = sndCameraIn;
                audio_play_sound(zoom, 1, false);
            }
            //Toggle aiming
            if (mouse_check_button_pressed(mb_right))
            {
                look = !look;
                target.fVisible = !look;
                free = false;
                pitch = 0;
                var zoom = sndCameraOut;
                if (look)
                {
                    zoom = sndCameraIn;
                    faceDir = tD;
                }
                else
                    target.faceDir = faceDir;
                audio_play_sound(zoom, 1, false);
            }
        }
        else
        {
            free = false;
            look = false;
        }
        //Camera mechanics
        if (look)
        {
            global.cX = tX;
            global.cY = tY;
            global.cZ = target.top - 4;
            //Mouselook
            mouse_look(true);
            target.faceDir = global.cD;
        }
        else
        {
            var lerpAmount = 0.18;
            //Freelook
            if (free)
            {
                mouse_look(true);
                lerpAmount = 0.5;
            }
            else
                if (keyboard_check_pressed(ord("Q")) &amp;&amp; faceDir != tD)
                {
                    faceDir = tD;
                    audio_play_sound(sndCameraSpin, 1, false);
                }
            //Set the increments of the camera to zoom out for 3rd person
            var incX = lengthdir_x(range, faceDir), incY = lengthdir_y(range, faceDir), incZ = 0, obstructed = false, tBlockZ = tRZ + 24, tBlockZ2 = tZ + 24, tToX = tX - incX, tToY = tY - incY, tToZ = tBlockZ2, maxPitch = 89.5, minPitch = -89.5;
            if (free)
            {
                incX = lengthdir_x(lengthdir_x(range, faceDir), pitch);
                incY = lengthdir_x(lengthdir_y(range, faceDir), pitch);
                incZ = lengthdir_y(range, pitch);
                tToX = tX - incX;
                tToY = tY - incY;
                tToZ = tBlockZ2 + incZ;
            }
            //If there is a block behind...
            if (c_raycast_world(tX, tY, tBlockZ, tX - incX, tY - incY, tBlockZ + incZ, 1))
            {
                tToX = c_hit_x();
                tToY = c_hit_y();
                tToZ = c_hit_z();
                obstructed = true;
            }
            if (obstructed)
            {
                tBlockZ2 = tZ + 10;
                if (free)
                    tToZ = tBlockZ2 + incZ;
            }
            //smooth turning
            global.cX = lerp(global.cX, tToX, lerpAmount);
            global.cY = lerp(global.cY, tToY, lerpAmount);
            global.cZ = max(global.minZ, lerp(global.cZ, tToZ, 0.1));
            x = global.cX;
            y = global.cY;
            z = global.cZ;
            if !(free)
                pitch += turn_to_angle(point_pitch(global.cX, global.cY, global.cZ, tX, tY, tBlockZ2), 2, pitch);
            else
            {
                minPitch = -45;
                maxPitch = 0;
            }
            pitch = clamp(pitch, minPitch, maxPitch);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off D3D
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set global camera variables
global.cX = x;
global.cY = y;
global.cZ = z;
global.cD = faceDir;
global.cP = pitch;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rendering
draw_set_color(c_white);
var dir = degtorad(global.cD), cSin = sin(dir), cCos = cos(dir), cTan = tan(degtorad(pitch)), xTo = global.cX + cCos, yTo = global.cY - cSin, zTo = global.cZ + cTan;
d3d_set_projection_ext(global.cX, global.cY, global.cZ, xTo, yTo, zTo, 0, 0, 1, 45, view_wview[0] / view_hview[0], 1, 65536);
audio_listener_position(global.cX, global.cY, global.cZ);
audio_listener_orientation(cCos, -cSin, cTan, 0, 0, 1);
//Draw the skybox
if (global.skybox != -1)
{
    d3d_set_zwriteenable(false);
    d3d_draw_ellipsoid(global.cX + 128, global.cY + 128, global.cZ + 256, global.cX - 128, global.cY - 128, global.cZ - 256, texture_get(global.skybox), 1, -1, 32);
    d3d_set_zwriteenable(true);
}
//Draw world model
texture_set_repeat(true);
for (i = 0; i &lt; ds_list_size(global.worldModel); i++)
{
    var vertexBatch = ds_list_find_value(global.worldModel, i);
    if (ds_exists(vertexBatch, ds_type_list))
        d3d_model_draw(ds_list_find_value(vertexBatch, 1), 0, 0, 0, texture_get(ds_list_find_value(vertexBatch, 0)));
}
texture_set_repeat(false);
//Draw actors
with (objActor)
{
    if (fVisible &amp;&amp; sprite != -1)
    {
        if (rotate)
        {
            var dir = (round((point_direction(x, y, global.cX, global.cY) - faceDir) / 90)) mod (4);
            while (dir &lt; 0)
                dir += 4;
            cFrame = min(((sprite_get_number(sprite) * 0.25) * dir) + frame, sprite_get_number(sprite) - 1);
        }
        else
            cFrame = frame;
        shader_set(shBillboard);
        matrix_set(matrix_world, matrix_build(x, y, bottom, 0, 0, 0, 1, 1, 1));
        var size = scale * 0.5;
        draw_sprite_ext(sprite, cFrame, 0, 0, size, -size, 0, c_white, 1);
        shader_reset();
        matrix_world_reset();
    }
    if (fShadow &amp;&amp; shadowZ != -65536 &amp;&amp; global.cZ &gt; shadowZ)
    {
        matrix_set(matrix_world, shadowMatrix);
        var shadowSize = 2 * radius;
        draw_background_stretched_ext(bgShadow, -radius, -radius, shadowSize, shadowSize, c_white, 0.51);
        matrix_world_reset();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
